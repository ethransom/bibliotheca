<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="3570"><g><title>day07`0x00000001023e082c (26 samples, 0.73%)</title><rect x="12.6611%" y="165" width="0.7283%" height="15" fill="rgb(227,0,7)" fg:x="452" fg:w="26"/><text x="12.9111%" y="175.50"></text></g><g><title>day07`0x00000001023e0908 (74 samples, 2.07%)</title><rect x="13.3894%" y="165" width="2.0728%" height="15" fill="rgb(217,0,24)" fg:x="478" fg:w="74"/><text x="13.6394%" y="175.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (32 samples, 0.90%)</title><rect x="14.5658%" y="149" width="0.8964%" height="15" fill="rgb(221,193,54)" fg:x="520" fg:w="32"/><text x="14.8158%" y="159.50"></text></g><g><title>day07`0x00000001023fe994 (1 samples, 0.03%)</title><rect x="15.4622%" y="165" width="0.0280%" height="15" fill="rgb(248,212,6)" fg:x="552" fg:w="1"/><text x="15.7122%" y="175.50"></text></g><g><title>day07`0x0000000102410f84 (35 samples, 0.98%)</title><rect x="16.7227%" y="149" width="0.9804%" height="15" fill="rgb(208,68,35)" fg:x="597" fg:w="35"/><text x="16.9727%" y="159.50"></text></g><g><title>day07`0x00000001023fe994 (16 samples, 0.45%)</title><rect x="22.4370%" y="101" width="0.4482%" height="15" fill="rgb(232,128,0)" fg:x="801" fg:w="16"/><text x="22.6870%" y="111.50"></text></g><g><title>day07`0x00000001023fea10 (2 samples, 0.06%)</title><rect x="22.8852%" y="101" width="0.0560%" height="15" fill="rgb(207,160,47)" fg:x="817" fg:w="2"/><text x="23.1352%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.08%)</title><rect x="23.8375%" y="85" width="0.0840%" height="15" fill="rgb(228,23,34)" fg:x="851" fg:w="3"/><text x="24.0875%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.03%)</title><rect x="25.3782%" y="53" width="0.0280%" height="15" fill="rgb(218,30,26)" fg:x="906" fg:w="1"/><text x="25.6282%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="25.4062%" y="53" width="0.0560%" height="15" fill="rgb(220,122,19)" fg:x="907" fg:w="2"/><text x="25.6562%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.34%)</title><rect x="25.4622%" y="53" width="0.3361%" height="15" fill="rgb(250,228,42)" fg:x="909" fg:w="12"/><text x="25.7122%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (19 samples, 0.53%)</title><rect x="25.9664%" y="37" width="0.5322%" height="15" fill="rgb(240,193,28)" fg:x="927" fg:w="19"/><text x="26.2164%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (37 samples, 1.04%)</title><rect x="25.7983%" y="53" width="1.0364%" height="15" fill="rgb(216,20,37)" fg:x="921" fg:w="37"/><text x="26.0483%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.34%)</title><rect x="26.4986%" y="37" width="0.3361%" height="15" fill="rgb(206,188,39)" fg:x="946" fg:w="12"/><text x="26.7486%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (82 samples, 2.30%)</title><rect x="24.5938%" y="69" width="2.2969%" height="15" fill="rgb(217,207,13)" fg:x="878" fg:w="82"/><text x="24.8438%" y="79.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.06%)</title><rect x="26.8347%" y="53" width="0.0560%" height="15" fill="rgb(231,73,38)" fg:x="958" fg:w="2"/><text x="27.0847%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.08%)</title><rect x="26.8908%" y="69" width="0.0840%" height="15" fill="rgb(225,20,46)" fg:x="960" fg:w="3"/><text x="27.1408%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (113 samples, 3.17%)</title><rect x="23.9216%" y="85" width="3.1653%" height="15" fill="rgb(210,31,41)" fg:x="854" fg:w="113"/><text x="24.1716%" y="95.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.11%)</title><rect x="26.9748%" y="69" width="0.1120%" height="15" fill="rgb(221,200,47)" fg:x="963" fg:w="4"/><text x="27.2248%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (116 samples, 3.25%)</title><rect x="27.0868%" y="85" width="3.2493%" height="15" fill="rgb(226,26,5)" fg:x="967" fg:w="116"/><text x="27.3368%" y="95.50">lib..</text></g><g><title>day07`0x0000000102416c00 (293 samples, 8.21%)</title><rect x="22.9412%" y="101" width="8.2073%" height="15" fill="rgb(249,33,26)" fg:x="819" fg:w="293"/><text x="23.1912%" y="111.50">day07`0x000..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (29 samples, 0.81%)</title><rect x="30.3361%" y="85" width="0.8123%" height="15" fill="rgb(235,183,28)" fg:x="1083" fg:w="29"/><text x="30.5861%" y="95.50"></text></g><g><title>day07`DYLD-STUB$$malloc (11 samples, 0.31%)</title><rect x="31.1485%" y="101" width="0.3081%" height="15" fill="rgb(221,5,38)" fg:x="1112" fg:w="11"/><text x="31.3985%" y="111.50"></text></g><g><title>day07`DYLD-STUB$$realloc (1 samples, 0.03%)</title><rect x="31.4566%" y="101" width="0.0280%" height="15" fill="rgb(247,18,42)" fg:x="1123" fg:w="1"/><text x="31.7066%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (74 samples, 2.07%)</title><rect x="31.4846%" y="101" width="2.0728%" height="15" fill="rgb(241,131,45)" fg:x="1124" fg:w="74"/><text x="31.7346%" y="111.50">l..</text></g><g><title>day07`0x0000000102416b50 (440 samples, 12.32%)</title><rect x="21.3165%" y="117" width="12.3249%" height="15" fill="rgb(249,31,29)" fg:x="761" fg:w="440"/><text x="21.5665%" y="127.50">day07`0x0000000102..</text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.08%)</title><rect x="33.5574%" y="101" width="0.0840%" height="15" fill="rgb(225,111,53)" fg:x="1198" fg:w="3"/><text x="33.8074%" y="111.50"></text></g><g><title>day07`0x0000000102410f84 (497 samples, 13.92%)</title><rect x="19.8319%" y="133" width="13.9216%" height="15" fill="rgb(238,160,17)" fg:x="708" fg:w="497"/><text x="20.0819%" y="143.50">day07`0x0000000102410..</text></g><g><title>day07`0x0000000102416c00 (4 samples, 0.11%)</title><rect x="33.6415%" y="117" width="0.1120%" height="15" fill="rgb(214,148,48)" fg:x="1201" fg:w="4"/><text x="33.8915%" y="127.50"></text></g><g><title>day07`0x00000001024124dc (50 samples, 1.40%)</title><rect x="33.7535%" y="133" width="1.4006%" height="15" fill="rgb(232,36,49)" fg:x="1205" fg:w="50"/><text x="34.0035%" y="143.50"></text></g><g><title>day07`0x0000000102412eac (3 samples, 0.08%)</title><rect x="35.1541%" y="133" width="0.0840%" height="15" fill="rgb(209,103,24)" fg:x="1255" fg:w="3"/><text x="35.4041%" y="143.50"></text></g><g><title>day07`0x0000000102416b50 (16 samples, 0.45%)</title><rect x="35.2381%" y="133" width="0.4482%" height="15" fill="rgb(229,88,8)" fg:x="1258" fg:w="16"/><text x="35.4881%" y="143.50"></text></g><g><title>day07`DYLD-STUB$$memcpy (16 samples, 0.45%)</title><rect x="35.6863%" y="133" width="0.4482%" height="15" fill="rgb(213,181,19)" fg:x="1274" fg:w="16"/><text x="35.9363%" y="143.50"></text></g><g><title>day07`0x0000000102411e88 (745 samples, 20.87%)</title><rect x="17.7031%" y="149" width="20.8683%" height="15" fill="rgb(254,191,54)" fg:x="632" fg:w="745"/><text x="17.9531%" y="159.50">day07`0x0000000102411e88</text></g><g><title>libsystem_platform.dylib`_platform_memmove (87 samples, 2.44%)</title><rect x="36.1345%" y="133" width="2.4370%" height="15" fill="rgb(241,83,37)" fg:x="1290" fg:w="87"/><text x="36.3845%" y="143.50">li..</text></g><g><title>day07`0x0000000102410ae0 (907 samples, 25.41%)</title><rect x="15.4902%" y="165" width="25.4062%" height="15" fill="rgb(233,36,39)" fg:x="553" fg:w="907"/><text x="15.7402%" y="175.50">day07`0x0000000102410ae0</text></g><g><title>day07`0x00000001024124dc (83 samples, 2.32%)</title><rect x="38.5714%" y="149" width="2.3249%" height="15" fill="rgb(226,3,54)" fg:x="1377" fg:w="83"/><text x="38.8214%" y="159.50">d..</text></g><g><title>day07`0x0000000102411e88 (26 samples, 0.73%)</title><rect x="40.8964%" y="165" width="0.7283%" height="15" fill="rgb(245,192,40)" fg:x="1460" fg:w="26"/><text x="41.1464%" y="175.50"></text></g><g><title>day07`0x0000000102412088 (101 samples, 2.83%)</title><rect x="41.6246%" y="165" width="2.8291%" height="15" fill="rgb(238,167,29)" fg:x="1486" fg:w="101"/><text x="41.8746%" y="175.50">da..</text></g><g><title>day07`0x00000001023fe994 (17 samples, 0.48%)</title><rect x="54.1737%" y="117" width="0.4762%" height="15" fill="rgb(232,182,51)" fg:x="1934" fg:w="17"/><text x="54.4237%" y="127.50"></text></g><g><title>day07`0x0000000102415de0 (267 samples, 7.48%)</title><rect x="54.6499%" y="117" width="7.4790%" height="15" fill="rgb(231,60,39)" fg:x="1951" fg:w="267"/><text x="54.8999%" y="127.50">day07`0x00..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (200 samples, 5.60%)</title><rect x="56.5266%" y="101" width="5.6022%" height="15" fill="rgb(208,69,12)" fg:x="2018" fg:w="200"/><text x="56.7766%" y="111.50">libsyst..</text></g><g><title>day07`DYLD-STUB$$malloc (25 samples, 0.70%)</title><rect x="62.1289%" y="117" width="0.7003%" height="15" fill="rgb(235,93,37)" fg:x="2218" fg:w="25"/><text x="62.3789%" y="127.50"></text></g><g><title>day07`0x00000001023e082c (647 samples, 18.12%)</title><rect x="49.2717%" y="149" width="18.1232%" height="15" fill="rgb(213,116,39)" fg:x="1759" fg:w="647"/><text x="49.5217%" y="159.50">day07`0x00000001023e082c</text></g><g><title>day07`0x0000000102415e68 (582 samples, 16.30%)</title><rect x="51.0924%" y="133" width="16.3025%" height="15" fill="rgb(222,207,29)" fg:x="1824" fg:w="582"/><text x="51.3424%" y="143.50">day07`0x0000000102415e68</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (163 samples, 4.57%)</title><rect x="62.8291%" y="117" width="4.5658%" height="15" fill="rgb(206,96,30)" fg:x="2243" fg:w="163"/><text x="63.0791%" y="127.50">libsy..</text></g><g><title>day07`0x0000000102412088 (73 samples, 2.04%)</title><rect x="67.3950%" y="149" width="2.0448%" height="15" fill="rgb(218,138,4)" fg:x="2406" fg:w="73"/><text x="67.6450%" y="159.50">d..</text></g><g><title>day07`0x0000000102412460 (9 samples, 0.25%)</title><rect x="69.1877%" y="133" width="0.2521%" height="15" fill="rgb(250,191,14)" fg:x="2470" fg:w="9"/><text x="69.4377%" y="143.50"></text></g><g><title>day07`0x0000000102412460 (57 samples, 1.60%)</title><rect x="69.4398%" y="149" width="1.5966%" height="15" fill="rgb(239,60,40)" fg:x="2479" fg:w="57"/><text x="69.6898%" y="159.50"></text></g><g><title>day07`0x0000000102415e68 (40 samples, 1.12%)</title><rect x="71.0364%" y="149" width="1.1204%" height="15" fill="rgb(206,27,48)" fg:x="2536" fg:w="40"/><text x="71.2864%" y="159.50"></text></g><g><title>day07`DYLD-STUB$$memcpy (12 samples, 0.34%)</title><rect x="72.1569%" y="149" width="0.3361%" height="15" fill="rgb(225,35,8)" fg:x="2576" fg:w="12"/><text x="72.4069%" y="159.50"></text></g><g><title>day07`0x00000001024159a8 (1,077 samples, 30.17%)</title><rect x="44.4538%" y="165" width="30.1681%" height="15" fill="rgb(250,213,24)" fg:x="1587" fg:w="1077"/><text x="44.7038%" y="175.50">day07`0x00000001024159a8</text></g><g><title>libsystem_platform.dylib`_platform_memmove (76 samples, 2.13%)</title><rect x="72.4930%" y="149" width="2.1289%" height="15" fill="rgb(247,123,22)" fg:x="2588" fg:w="76"/><text x="72.7430%" y="159.50">l..</text></g><g><title>day07`DYLD-STUB$$malloc (4 samples, 0.11%)</title><rect x="74.6218%" y="165" width="0.1120%" height="15" fill="rgb(231,138,38)" fg:x="2664" fg:w="4"/><text x="74.8718%" y="175.50"></text></g><g><title>day07`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="74.7339%" y="165" width="0.0280%" height="15" fill="rgb(231,145,46)" fg:x="2668" fg:w="1"/><text x="74.9839%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.67%)</title><rect x="74.7619%" y="165" width="0.6723%" height="15" fill="rgb(251,118,11)" fg:x="2669" fg:w="24"/><text x="75.0119%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (470 samples, 13.17%)</title><rect x="75.4342%" y="165" width="13.1653%" height="15" fill="rgb(217,147,25)" fg:x="2693" fg:w="470"/><text x="75.6842%" y="175.50">libsystem_malloc.dyl..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.42%)</title><rect x="88.5994%" y="165" width="0.4202%" height="15" fill="rgb(247,81,37)" fg:x="3163" fg:w="15"/><text x="88.8494%" y="175.50"></text></g><g><title>day07`0x00000001023dff40 (3,184 samples, 89.19%)</title><rect x="0.0000%" y="181" width="89.1877%" height="15" fill="rgb(209,12,38)" fg:x="0" fg:w="3184"/><text x="0.2500%" y="191.50">day07`0x00000001023dff40</text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.17%)</title><rect x="89.0196%" y="165" width="0.1681%" height="15" fill="rgb(227,1,9)" fg:x="3178" fg:w="6"/><text x="89.2696%" y="175.50"></text></g><g><title>day07`0x00000001023e0908 (3 samples, 0.08%)</title><rect x="89.1877%" y="181" width="0.0840%" height="15" fill="rgb(248,47,43)" fg:x="3184" fg:w="3"/><text x="89.4377%" y="191.50"></text></g><g><title>day07`0x00000001023fea00 (5 samples, 0.14%)</title><rect x="89.2717%" y="181" width="0.1401%" height="15" fill="rgb(221,10,30)" fg:x="3187" fg:w="5"/><text x="89.5217%" y="191.50"></text></g><g><title>day07`0x0000000102410ae0 (11 samples, 0.31%)</title><rect x="89.4118%" y="181" width="0.3081%" height="15" fill="rgb(210,229,1)" fg:x="3192" fg:w="11"/><text x="89.6618%" y="191.50"></text></g><g><title>day07`DYLD-STUB$$free (60 samples, 1.68%)</title><rect x="89.7199%" y="181" width="1.6807%" height="15" fill="rgb(222,148,37)" fg:x="3203" fg:w="60"/><text x="89.9699%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (243 samples, 6.81%)</title><rect x="91.4006%" y="181" width="6.8067%" height="15" fill="rgb(234,67,33)" fg:x="3263" fg:w="243"/><text x="91.6506%" y="191.50">libsystem..</text></g><g><title>day07`0x00000001023e1e1c (3,568 samples, 99.94%)</title><rect x="0.0000%" y="277" width="99.9440%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="3568"/><text x="0.2500%" y="287.50">day07`0x00000001023e1e1c</text></g><g><title>day07`0x00000001023fa7e0 (3,568 samples, 99.94%)</title><rect x="0.0000%" y="261" width="99.9440%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="3568"/><text x="0.2500%" y="271.50">day07`0x00000001023fa7e0</text></g><g><title>day07`0x00000001023e0590 (3,568 samples, 99.94%)</title><rect x="0.0000%" y="245" width="99.9440%" height="15" fill="rgb(213,79,30)" fg:x="0" fg:w="3568"/><text x="0.2500%" y="255.50">day07`0x00000001023e0590</text></g><g><title>day07`0x00000001023e05ac (3,568 samples, 99.94%)</title><rect x="0.0000%" y="229" width="99.9440%" height="15" fill="rgb(246,177,23)" fg:x="0" fg:w="3568"/><text x="0.2500%" y="239.50">day07`0x00000001023e05ac</text></g><g><title>day07`0x00000001023e1bfc (3,568 samples, 99.94%)</title><rect x="0.0000%" y="213" width="99.9440%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="3568"/><text x="0.2500%" y="223.50">day07`0x00000001023e1bfc</text></g><g><title>day07`0x00000001023e1d04 (3,568 samples, 99.94%)</title><rect x="0.0000%" y="197" width="99.9440%" height="15" fill="rgb(216,154,8)" fg:x="0" fg:w="3568"/><text x="0.2500%" y="207.50">day07`0x00000001023e1d04</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (62 samples, 1.74%)</title><rect x="98.2073%" y="181" width="1.7367%" height="15" fill="rgb(244,35,45)" fg:x="3506" fg:w="62"/><text x="98.4573%" y="191.50"></text></g><g><title>dyld`start (3,569 samples, 99.97%)</title><rect x="0.0000%" y="293" width="99.9720%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="3569"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.03%)</title><rect x="99.9440%" y="277" width="0.0280%" height="15" fill="rgb(240,54,50)" fg:x="3568" fg:w="1"/><text x="100.1940%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.03%)</title><rect x="99.9440%" y="261" width="0.0280%" height="15" fill="rgb(233,84,52)" fg:x="3568" fg:w="1"/><text x="100.1940%" y="271.50"></text></g><g><title>all (3,570 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="3570"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_unlock (1 samples, 0.03%)</title><rect x="99.9720%" y="293" width="0.0280%" height="15" fill="rgb(249,43,39)" fg:x="3569" fg:w="1"/><text x="100.2220%" y="303.50"></text></g></svg></svg>